rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --------------------------------------------------
    // Optimized Helper Functions
    // --------------------------------------------------
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function isAdmin() {
      return isAuthenticated() && getUserData().role == 'Admin';
    }

    function isIT() {
      return isAuthenticated() && getUserData().role == 'IT';
    }

    function isProfessor() {
      return isAuthenticated() && getUserData().role == 'Professor';
    }

    function isStaff() {
      return isAdmin() || isProfessor();
    }

    function isStudent() {
      return isAuthenticated() && getUserData().role == 'Student';
    }

    function isElevatedUser() {
      return isAdmin() || isIT();
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // --------------------------------------------------
    // Data Validation Functions (Unchanged)
    // --------------------------------------------------
    function isValidSubject() {
      let data = request.resource.data;
      return data.keys().hasAll([
        'name',
        'code',
        'credits',
        'hasCoursework',
        'hasLab',
        'isElective',
        'availableForSemesters',
        'lastUpdated'
      ]) &&
      data.name is string &&
      data.code is string &&
      data.credits is number &&
      data.hasCoursework is bool &&
      data.hasLab is bool &&
      data.isElective is bool &&
      data.availableForSemesters is list;
    }

    function isValidResultData() {
      let incomingData = request.resource.data;
      return (incomingData.keys().hasAll([
        'semesterNumber', 
        'department', 
        'lastUpdated', 
        'subjects'
      ]) &&
      incomingData.semesterNumber is number &&
      incomingData.department is string &&
      incomingData.subjects is list) ||
      (request.method == 'update' && incomingData.diff(resource.data).affectedKeys().size() > 0);
    }

    // --------------------------------------------------
    // Collections Rules
    // --------------------------------------------------
    match /departments/{department} {
      allow read: if isAuthenticated();
      
      match /subjects/{subjectId} {
        allow read: if isAuthenticated();
        allow create, update: if isAdmin() && isValidSubject();
        allow delete: if isAdmin();
      }
    }

    match /results/{userId} {
      allow create, delete: if isAdmin();
      allow read: if isAuthenticated();
      
      match /semesters/{semesterId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
        allow update: if isProfessor() &&
                      isValidResultData() &&
                      get(/databases/$(database)/documents/users/$(userId)).data.department ==
                      getUserData().department;
      }
    }

    match /templates/{department}/semesters/{semesterId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    match /users/{userId} {
      function isValidUserData() {
        let data = request.resource.data;
        return data.keys().hasAll([
          'firstName',
          'lastName',
          'email',
          'phone',
          'role',
          'department',
          'birthDate',
          'createdAt',
          'qrCode',
          'totalTrainingScore',
          'profileImage'
        ]) &&
        data.firstName is string &&
        data.lastName is string &&
        data.email is string &&
        data.phone is string &&
        data.role is string &&
        data.department is string &&
        data.birthDate is string &&
        data.totalTrainingScore is number;
      }

      allow create: if isAuthenticated() && isValidUserData();
      allow read: if isAuthenticated();
      allow update: if (isOwner(userId) || isAdmin());
      allow delete: if isAdmin();
    }

    match /announcements/{document} {
      allow read: if true; // Anyone can read announcements
      allow create: if isAuthenticated() &&
                     request.resource.data.email == request.auth.token.email; // Authenticated users can create their own announcements
      allow delete: if isAuthenticated() &&
                     resource.data.email == request.auth.token.email; // Users can delete their own announcements
    }

    match /training_announcements/{document} {
      allow read: if true; // Anyone can read training announcements
      allow create, delete: if isAdmin(); // Only Admin can create or delete training announcements
    }

    // --------------------------------------------------
    // Default Catch-All
    // --------------------------------------------------
    match /{document=**} {
      allow read: if isAuthenticated(); // Authenticated users can read any document
      allow write: if isAdmin(); // Only Admin can write to any document
    }
  }
}